package im.tox.tox4j.impl.jni.codegen

import im.tox.tox4j.av.ToxAv
import im.tox.tox4j.core.ToxCore
import im.tox.tox4j.impl.jni.codegen.cxx.Ast._
import im.tox.tox4j.impl.jni.{ AutoGenerated, MethodMap, ToxAvJni, ToxCoreJni }

import scala.reflect.runtime.universe._

object JniMethodImpls extends CodeGenerator {

  val typeMap = Map(
    "int" -> "jint"
  )

  def generateNativeCode[T](jniClass: Class[_])(implicit evidence: TypeTag[T]): TranslationUnit = {
    val mirror = runtimeMirror(jniClass.getClassLoader)
    val traitMirror = mirror.typeOf[T]

    val methods = MethodMap(jniClass).filter(_._2.getAnnotation(classOf[AutoGenerated]) != null)
    methods.foreach {
      case (name, method) =>
        val traitMethod = traitMirror.member(TermName(name))
        println(traitMethod)
    }
    methods.values.toSeq
      .flatMap { method =>
        Seq(
          Comment(typeMap(method.getReturnType.getName)),
          MacroCall(FunCall(Identifier("TOX_METHOD"), Seq(
            Identifier(typeMap(method.getReturnType.getName)),
            Identifier(method.getName)
          )))
        )
      }
  }

  writeCode("ToxAv/generated/impls.h", "\n") {
    Comment(classOf[ToxAvJni].getName) +:
      generateNativeCode[ToxAv[_]](classOf[ToxAvJni])
  }

  writeCode("ToxCore/generated/impls.h", "\n") {
    Comment(classOf[ToxCoreJni].getName) +:
      generateNativeCode[ToxCore[_]](classOf[ToxCoreJni])
  }

}
